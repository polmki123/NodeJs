Dom이란 html 코드안에 블럭 하나하나 요소를 객체 오브젝트라 하는데 이를 dom이라고 표현한다. 
1. virtual Dom : 전체가 Reload 되는 것이 아니라 선택적으로 업데이트 된 Dom만 보는 것 
2. SPA 싱글 페이지 어플리케이션 : 링크를 클릭하거나 새로고침 하거나 이동하는 작업없이 현재 페이지에서 모든것이 바뀔 수 있는것 
3. only view, No MVC : MVC모델이 무거워짐을 막도록 해준다. 
4. reusable components : 재사용 가능한 components
5. Library FrameWork : 굉장히 빠르다, 퍼포먼스, ui rendering 을 위한 ui rendering 데이터 바인딩 가능 
    해당하는 코어 모듈은 최소화하고, 경량화된 모듈을 바탕으로 재사용 가능한 컴포넌트 
    최소한의 모듈만 코어로 유저층에서 무수히 많은 컴포넌트를 만들 수 있게함. 
    사용자 게층에서 재사용 가능하게 하게끔, 일반적으로 사용가능한 컴포넌트로 만드는 것 
6. react hook functional programing 기반의 개발 가능 
7. Hot reloading : 자동으로 페이지가 재사용
8. server side Rendering (feat. SEO) : 기존의 단일 페이지가 가진 검색엔진 최적화 문제를 해결, 모바일 앱, Client 단에서 하지 않고 Sever단에서 Rendering


1. Framework(프레임워크)


프레임워크는 뼈대나 기반구조를 뜻하는데, Application 개발 시 필수적인 코드, 알고리즘, 데이터베이스 연동 등과 같은 기능들을 위해 어느정도 뼈대(구조)를 제공해주는 것입니다. 그러므로 그러한 뼈대 위에 프로그래머가 코드를 작성하여 Application을 완성시켜야 합니다. 어느정도 뼈대를 제공해 주기 때문에, 객체 지향 개발을 하면서 일관성 부족 등의 문제를 해결해 줍니다. 

그래서 소프트웨어에서는 프레임워크를 아래와 같이 정의하곤 합니다.

        소프트웨어의 특정 문제를 해결하기 위해서 상호 협력하는 클래스와 인터페이스의 집합


2. Library(라이브러리)


Library는 특정 기능에 대한 도구 or 함수들을 모은 집합입니다. 즉, 프로그래머가 개발하는데 필요한 것들을 모아둔 것입니다.

Library는 프로그래머라면 누구나 한번쯤은 써봤을 것이며, 스스로 써보지 않았다라고 생각하는 사람도 라이브러리가 무엇인지 몰라서 그렇게 얘기하는 것일 뿐, 자기도 모르게 써보았을 것입다. Library 역시도 아래와 같이 간단하게 정의할 수 있습니다. 

   단순 활용이 가능한 도구들의 집합

3. Framework와 Library의 차이 - Inversion Of Control
Framework와 Library의 차이는 Flow(흐름)에 대한 제어 권한이 어디에 있느냐의 차이입니다. 프레임워크는 전체적인 흐름을 자체적으로 가지고 있으며, 프로그래머가 그 안에 필요한 코드를 작성하는 반면에 라이브러리는 사용자가 흐름에 대해 제어를 하며 필요한 상황에 가져다 쓰는 것입니다. 

이 내용을 한 문장으로 정리하자면 프레임워크에는 제어의 역전(Inversion Of Control)이 적용되어있다는 것입니다.

camel case이기 때문에 두번째 음절은 대문자를 사용한다. 

컴포넌트가 여러 엘리먼트를 return 할때 jsx규칙상 하나의 태그로 묶어서 return 해줘야 한다. 이때 fragment를 사용하면 dom에 별도의 노드를 추가하지 않고 여러자식을 그룹화 할 수 있다.